#!/usr/bin/python
#
# Problem 12
# 08 March 2002
# 
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# 36: 1, 2, 3, 4, 6, 9, 12, 18, 36
# 45: 1, 3, 5, 9, 15, 45
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Answer: 
# 

from time import time
    
# Calculates the triangle number with n divisors
#
def triangle_bf(n):
	x = 1
	num = 0
	while 1:
		#print "x:", x, "number:", num
		num += x
		x += 1
		div_count = 0
		# need to check up to sqrt(n) as each number above has a mirror factor below and thus the div count is +2
		for i in range(1, int(num**0.5+1)):
			if num % i == 0:
				div_count += 2
		if div_count > n:
			print num
			return

# Gives the nth (7th = 28) triangle number
#
def triangle(n):
	return n * (n + 1) / 2

# Gives you the divisors for given number n
#
def divisors(n):
	divs = []
	
	for i in range(1, int(n*0.5) + 1):
		if n % i == 0:
			divs.append(i)
	
	divs.append(n)
	return divs;
	
# Main
#
start = time()

n = 500
div_c = 0
i = 0
triangle_bf(n)
#print divisors(triangle(9))

elapsed = (time() - start)
print "Time:", elapsed
